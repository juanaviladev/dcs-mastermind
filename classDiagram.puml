@startuml

top to bottom direction

class mastermind.views.ColorView {
    ~ write(): void
}
utils.WithConsoleView <|--- mastermind.views.ColorView

class mastermind.views.SecretCombinationView {
    ~ SecretCombinationView(PlayController)
    ~ writeln(): void
}
utils.WithConsoleView <|--- mastermind.views.SecretCombinationView
mastermind.views.SecretCombinationView ..> mastermind.views.MessageView
mastermind.views.SecretCombinationView --> mastermind.controllers.PlayController
mastermind.views.SecretCombinationView ..> mastermind.views.MessageView

class mastermind.views.ProposedCombinationView {
    ~ ProposedCombinationView(combination: ProposedCombination)
    ~ void write()
    ~ void read()
}

enum mastermind.views.MessageView {
    + ATTEMPTS
   	+ SECRET
   	+ RESUME
   	+ RESULT
   	+ PROPOSED_COMBINATION
   	+ TITLE
   	+ WINNER
   	+ LOOSER
    - message: String
    - MessageView(String)
}

class mastermind.views.Command {
    # playController: PlayController
    - title: String
    # Command(String, PlayController)
    # {abstract} execute(): void
    # {abstract} isActive(): boolean
    ~ getTitle(): String
}

class mastermind.views.RedoCommand {
    ~ RedoCommand(controller: PlayController)
}
mastermind.views.Command <|-- mastermind.views.RedoCommand

class mastermind.views.UndoCommand {
    ~ UndoCommand(controller: PlayController)
}
mastermind.views.Command <|-- mastermind.views.UndoCommand
mastermind.views.UndoCommand ..> mastermind.views.MessageView
mastermind.views.UndoCommand ..> mastermind.controllers.PlayController

class mastermind.views.ProposalCommand {
    ~ ProposalCommand(controller: PlayController)
}
mastermind.views.Command <|-- mastermind.views.ProposalCommand
mastermind.views.ProposalCommand ..> mastermind.views.ProposedCombinationView
mastermind.views.ProposalCommand ..> mastermind.controllers.PlayController
mastermind.views.ProposalCommand ..> mastermind.views.MessageView

class mastermind.views.PlayMenu {
    ~ PlayMenu(controller: PlayController)
}
mastermind.utils.Menu <|--- mastermind.views.PlayMenu
mastermind.views.PlayMenu ..> mastermind.controllers.PlayController
mastermind.views.PlayMenu *--> mastermind.views.ProposalCommand
mastermind.views.PlayMenu *--> mastermind.views.UndoCommand
mastermind.views.PlayMenu *--> mastermind.views.RedoCommand

class mastermind.views.PlayView {
    + interact(controller: PlayController): void
}
mastermind.views.PlayView ..> mastermind.views.PlayMenu
mastermind.views.PlayView ..> mastermind.views.BoardView

class mastermind.views.ResultView {
    ~ writeln(int): void
}
utils.WithConsoleView <|-- mastermind.views.ResultView
mastermind.views.ResultView ..> mastermind.views.MessageView

class mastermind.views.ResumeView {
    ~ interact(controller: ResumeController): void
}
mastermind.views.ResumeView ..> mastermind.controllers.ResumeController
mastermind.views.ResumeView ..> utils.YesNoDialog
mastermind.views.ResumeView ..> mastermind.views.MessageView

class mastermind.views.StartView {
    ~ interact(controller: StartController): void
}
utils.WithConsoleView <|-- mastermind.views.StartView
mastermind.views.StartView ..> mastermind.controllers.StartController
mastermind.views.StartView ..> mastermind.views.MessageView

class mastermind.views.View {
    - startView: StartView
    - proposalView: ProposalView
    - resumeView: ResumeView
    + View()
    + interact(controller: AcceptorController): void
    + visit(controller: StartController): void
    + visit(controller: PlayController): void
    + visit(controller: ResumeController): void
}
mastermind.controllers.ControllerVisitor <|.. mastermind.views.View
mastermind.views.View ..> mastermind.controllers.AcceptorController
mastermind.views.View ..> mastermind.controllers.PlayController
mastermind.views.View *--> mastermind.views.StartView
mastermind.views.View *--> mastermind.views.PlayView
mastermind.views.View *--> mastermind.views.ResumeView

interface mastermind.controllers.AcceptorController {
    + {abstract} accept(ControllerVisitor) : void
}
interface mastermind.controllers.ControllerVisitor {
     + {abstract} visit(StartController) : void
     + {abstract} visit(PlayController) : void
     + {abstract} visit(ResumeController) : void
}

class mastermind.controllers.RedoController {
    + RedoController(InMemorySession)
    ~ redo(): void
    ~ isRedoable(): boolean
}
mastermind.controllers.RedoController ..> mastermind.models.InMemorySession

class mastermind.controllers.UndoController {
    + UndoController(InMemorySession)
    ~ undo(): void
    ~ isUndoable(): boolean
}
mastermind.controllers.UndoController ..> mastermind.models.InMemorySession

class mastermind.controllers.ProposalController {
    ~ ProposalController(InMemorySession)
    ~ getAttempts() : int
    ~ addProposedCombination() : void
    ~ isWinner() : boolean
    ~ isLooser() : boolean
    ~ isFinished() : boolean
    ~ getProposedCombination(pos: int) : ProposedCombination
    ~ getResult(pos: int) : Result
}
mastermind.controllers.ProposalController --> mastermind.models.InMemorySession

interface mastermind.controllers.PlayController {
    + {abstract} undo(): void
    + {abstract} isUndoable(): boolean
    + {abstract} redo(): void
    + {abstract} isRedoable(): boolean
    + {abstract} isFinished(): boolean
    + {abstract} addProposedCombination(ProposedCombination): void
    + {abstract} getAttempts(): int
    + {abstract} getProposedCombination(pos): ProposedCombination
    + {abstract} getResult(pos): Result
    + {abstract} isWinner(): boolean
    + {abstract} isLooser(): boolean
}
mastermind.controllers.AcceptorController <|.. mastermind.controllers.PlayController

class mastermind.controllers.PlayControllerImplementation {
    - session: InMemorySession
    - proposalController: ProposalController
    - redoController: RedoController
    - undoController: UndoController
    + PlayControllerImplementation(InMemorySession)
    + undo(): void
    + isUndoable(): boolean
    + redo(): void
    + isRedoable(): boolean
    + isFinished(): boolean
    + addProposedCombination(ProposedCombination): void
    + getAttempts(): int
    + getProposedCombination(pos): ProposedCombination
    + getResult(pos): Result
    + isWinner(): boolean
    + isLooser(): boolean
}
mastermind.controllers.PlayController <|.. mastermind.controllers.PlayControllerImplementation
mastermind.controllers.PlayControllerImplementation --> mastermind.models.InMemorySession
mastermind.controllers.PlayControllerImplementation *--> mastermind.controllers.ProposalController
mastermind.controllers.PlayControllerImplementation *--> mastermind.controllers.UndoController
mastermind.controllers.PlayControllerImplementation *--> mastermind.controllers.RedoController

interface mastermind.models.Session {
    + Session()
    + {abstract} getValueState(): StateValue
}
mastermind.models.Session *--> mastermind.models.StateValue

class mastermind.models.InMemorySession {
    - mastermind: Mastermind
    - registry: GameRegistry
    - state: State
    + InMemorySession()
    + getValueState(): StateValue
}
mastermind.models.InMemorySession *--> mastermind.models.Mastermind
mastermind.models.InMemorySession *--> mastermind.models.GameRegistry
mastermind.models.InMemorySession *--> mastermind.models.State

class mastermind.models.GameRegistry {
   - mementos: List<GameMemento>
   - mastermind: Mastermind
   - actualIndex: int
   ~ GameRegistry(Mastermind)
   ~ register(): void
   ~ undo(): void
   ~ redo(): void
   ~ isUndoable(): boolean
   ~ isRedoable(): boolean
}
mastermind.models.GameRegistry *--> mastermind.models.GameMemento
mastermind.models.GameRegistry --> mastermind.models.Mastermind

class mastermind.models.Mastermind {
   ~ createMemento(): GameMemento
   ~ restore(GameMemento): void
}
mastermind.models.Mastermind ..> mastermind.models.GameMemento

class mastermind.models.GameMemento {
   - proposedCombinations: List<ProposedCombination>
   - results: List<Result>
   - attempts: int
   ~ GameMemento(proposedCombinations, results, attempts)
}

class mastermind.views.BoardView {
   ~ write(PlayController): void
}
mastermind.views.BoardView --> mastermind.controllers.PlayController
mastermind.views.BoardView ..> mastermind.views.ResultView

interface mastermind.controllers.ResumeController {
   ~ ResumeController()
   + {abstract} resume(newGame): void
   + accept(ControllerVisitor) : void
}
mastermind.controllers.AcceptorController <|.. mastermind.controllers.ResumeController
mastermind.controllers.ResumeController ..> mastermind.controllers.ControllerVisitor

class mastermind.distributed.ResumeControllerImplementation {
    - session: InMemorySession
    ~ ResumeControllerProxy(InMemorySession)
    + accept(ControllerVisitor) : void
    + start(): void
 }
mastermind.controllers.ResumeController <|.. mastermind.controllers.ResumeControllerImplementation
mastermind.controllers.ResumeControllerImplementation *--> mastermind.models.InMemorySession

class mastermind.distributed.ResumeControllerProxy {
   - connection: RemoteConnection
   ~ ResumeControllerProxy()
   + accept(ControllerVisitor) : void
   + resume(newGame: boolean): void
}
mastermind.controllers.StartController <|.. mastermind.distributed.StartControllerProxy
mastermind.controllers.StartController ..> mastermind.controllers.ControllerVisitor


interface mastermind.controllers.StartController {
   ~ StartController()
   + accept(ControllerVisitor) : void
   + {abstract} start(): void
}
mastermind.controllers.AcceptorController <|.. mastermind.controllers.StartController
mastermind.controllers.StartController ..> mastermind.controllers.ControllerVisitor

class mastermind.distributed.StartControllerImplementation {
   - session: InMemorySession
   ~ StartControllerProxy(InMemorySession)
   + accept(ControllerVisitor) : void
   + start(): void
}
mastermind.controllers.StartController <|.. mastermind.controllers.StartControllerImplementation
mastermind.controllers.StartControllerImplementation *--> mastermind.models.InMemorySession

class mastermind.distributed.StartControllerProxy {
   - connection: RemoteConnection
   ~ StartControllerProxy()
   + accept(ControllerVisitor) : void
   + start(): void
}
mastermind.controllers.StartController <|.. mastermind.distributed.StartControllerProxy
mastermind.controllers.StartController ..> mastermind.controllers.ControllerVisitor

class mastermind.distributed.MastermindServer {
    - dispatcherRegistry: DispatcherRegistry
    - logic: ServerLogic
    + {static} main() : void
}
mastermind.distributed.MastermindServer <|-- mastermind.MastermindStarter
mastermind.distributed.MastermindServer *--> mastermind.distributed.dispatchers.DispatcherRegistry
mastermind.distributed.MastermindServer *--> mastermind.distributed.ServerLogic

class mastermind.distributed.ServerLogic {
    + createDispatchers(DispatcherRegistry): void
}
mastermind.distributed.MastermindServer ..> mastermind.distributed.dispatchers.FrameType

class mastermind.distributed.dispatchers.DispatcherRegistry {
    - tcpip: RemoteConnection
    - dispatchers: Map<FrameType, Dispatcher>
    + add(FrameType, Dispatcher): void
    + serve(): void
}
mastermind.distributed.dispatchers.DispatcherRegistry *--> mastermind.distributed.dispatchers.RemoteConnection

class mastermind.distributed.MastermindClient {
    - logic: LogicProxy
    # play() : void
    + {static} main() : void
}
mastermind.MastermindStarter <|-- mastermind.distributed.MastermindClient
mastermind.distributed.MastermindClient *--> mastermind.distributed.LogicProxy

abstract class mastermind.controllers.Logic {
    - session: Session
    - controllers: Map<StateValue, AcceptorController>
    # Logic(Session)
    + getController(): AcceptorController
}
mastermind.controllers.Logic ..> mastermind.controllers.AcceptorController
mastermind.controllers.Logic ..> mastermind.models.Session

class mastermind.distributed.LogicProxy {
    - connection: RemoteConnection
    + close(): void
}
mastermind.controllers.Logic <|-- mastermind.distributed.LogicProxy
mastermind.distributed.LogicProxy *--> mastermind.distributed.dispatchers.RemoteConnection
mastermind.distributed.LogicProxy *--> mastermind.distributed.SessionProxy
mastermind.distributed.LogicProxy ..> mastermind.distributed.StartControllerProxy
mastermind.distributed.LogicProxy ..> mastermind.distributed.PlayControllerProxy
mastermind.distributed.LogicProxy ..> mastermind.distributed.ResumeControllerProxy

class mastermind.controllers.LogicImplementation {
    # LogicImplementation()
}
mastermind.controllers.Logic <|-- mastermind.controllers.LogicImplementation
mastermind.controllers.LogicImplementation *--> mastermind.controllers.PlayControllerImplementation
mastermind.controllers.LogicImplementation *--> mastermind.controllers.StartControllerImplementation
mastermind.controllers.LogicImplementation *--> mastermind.controllers.ResumeControllerImplementation
mastermind.controllers.LogicImplementation ..> mastermind.models.StateValue

class mastermind.distributed.SessionProxy {
    - connection: RemoteConnection
    + getValueState() : StateValue
}
mastermind.models.Session <|.. mastermind.distributed.SessionProxy
mastermind.distributed.SessionProxy ..> mastermind.models.StateValue
mastermind.distributed.SessionProxy ..> mastermind.distributed.dispatchers.FrameType
mastermind.distributed.SessionProxy ..> mastermind.models.StateValue
mastermind.distributed.SessionProxy --> mastermind.distributed.dispatchers.RemoteConnection

class mastermind.distributed.StartControllerProxy {
    - tcpip: RemoteConnection
}
mastermind.controllers.StartController <|-- mastermind.distributed.StartControllerProxy
mastermind.distributed.StartControllerProxy ..> mastermind.distributed.dispatchers.FrameType

class mastermind.distributed.PlayControllerProxy {
    - tcpip: RemoteConnection
    ~ PlayControllerProxy(RemoteConnection)
    + undo(): void
    + isUndoable(): boolean
    + redo(): void
    + isRedoable(): boolean
    + isFinished(): boolean
    + addProposedCombination(ProposedCombination): void
    + getAttempts(): int
    + getProposedCombination(pos): ProposedCombination
    + getResult(pos): Result
    + isWinner(): boolean
    + isLooser(): boolean
}
mastermind.distributed.PlayControllerProxy --> mastermind.distributed.dispatchers.RemoteConnection
mastermind.controllers.AcceptorController <|.. mastermind.distributed.PlayControllerProxy
mastermind.controllers.PlayController <|.. mastermind.distributed.PlayControllerProxy
mastermind.distributed.PlayControllerProxy ..> mastermind.distributed.dispatchers.FrameType

class mastermind.distributed.ResumeControllerProxy {
    - tcpip: RemoteConnection
}
mastermind.controllers.ResumeController <|-- mastermind.distributed.ResumeControllerProxy
mastermind.distributed.ResumeControllerProxy ..> mastermind.distributed.dispatchers.FrameType

class mastermind.distributed.dispatchers.RemoteConnection {
    - tcpip: TCPIP
}

class mastermind.utils.TCPIP {

}

abstract class mastermind.distributed.dispatchers.Dispatcher {
    # connection: RemoteConnection
    + {abstract} dispatch(): void
    + associate(RemoteConnection): void
}
mastermind.distributed.dispatchers.Dispatcher --> mastermind.distributed.dispatchers.RemoteConnection

class mastermind.distributed.dispatchers.NextDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.NextDispatcher

class mastermind.distributed.dispatchers.ProposalDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.ProposalDispatcher

class mastermind.distributed.dispatchers.ResumeDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.ResumeDispatcher

class mastermind.distributed.dispatchers.StartDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.StartDispatcher

class mastermind.distributed.dispatchers.IsFinishedDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.IsFinishedDispatcher

class mastermind.distributed.dispatchers.IsRedoableDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.IsRedoableDispatcher

class mastermind.distributed.dispatchers.IsUndoableDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.IsUndoableDispatcher

class mastermind.distributed.dispatchers.RedoDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.RedoDispatcher

class mastermind.distributed.dispatchers.UndoDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.UndoDispatcher

enum mastermind.distributed.dispatchers.FrameType {
    START,
	STATE,
	UNDO,
	REDO,
	UNDOABLE,
	REDOABLE,
	PROPOSE,
	CLOSE,
	FINISHED,
	CONTINUE_STATE,
	NEW_GAME
}

@enduml