@startuml

class mastermind.distributed.SessionProxy {
    - connection: RemoteConnection
    + getValueState() : StateValue
}
mastermind.models.Session <|.. mastermind.distributed.SessionProxy
mastermind.distributed.SessionProxy ..> mastermind.models.StateValue
mastermind.distributed.SessionProxy ..> mastermind.distributed.dispatchers.FrameType
mastermind.distributed.SessionProxy ..> mastermind.models.StateValue
mastermind.distributed.SessionProxy --> mastermind.distributed.dispatchers.RemoteConnection

class mastermind.distributed.StartControllerProxy {
    - tcpip: RemoteConnection
}
mastermind.controllers.StartController <|-- mastermind.distributed.StartControllerProxy
mastermind.distributed.StartControllerProxy ..> mastermind.distributed.dispatchers.FrameType

class mastermind.distributed.PlayControllerProxy {
    - tcpip: RemoteConnection
    ~ PlayControllerProxy(RemoteConnection)
    + undo(): void
    + isUndoable(): boolean
    + redo(): void
    + isRedoable(): boolean
    + isFinished(): boolean
    + addProposedCombination(ProposedCombination): void
    + getAttempts(): int
    + getProposedCombination(pos): ProposedCombination
    + getResult(pos): Result
    + isWinner(): boolean
    + isLooser(): boolean
}
mastermind.distributed.PlayControllerProxy --> mastermind.distributed.dispatchers.RemoteConnection
mastermind.controllers.AcceptorController <|.. mastermind.distributed.PlayControllerProxy
mastermind.controllers.PlayController <|.. mastermind.distributed.PlayControllerProxy
mastermind.distributed.PlayControllerProxy ..> mastermind.distributed.dispatchers.FrameType

class mastermind.distributed.ResumeControllerProxy {
    - tcpip: RemoteConnection
}
mastermind.controllers.ResumeController <|-- mastermind.distributed.ResumeControllerProxy
mastermind.distributed.ResumeControllerProxy ..> mastermind.distributed.dispatchers.FrameType

class mastermind.distributed.dispatchers.RemoteConnection {
    - tcpip: TCPIP
}
mastermind.distributed.RemoteConnection --> mastermind.utils.TCPIP

abstract class mastermind.distributed.dispatchers.Dispatcher {
    # connection: RemoteConnection
    + {abstract} dispatch(): void
    + associate(RemoteConnection): void
}
mastermind.distributed.dispatchers.Dispatcher --> mastermind.distributed.dispatchers.RemoteConnection

class mastermind.distributed.dispatchers.NextDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.NextDispatcher

class mastermind.distributed.dispatchers.ProposalDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.ProposalDispatcher

class mastermind.distributed.dispatchers.ResumeDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.ResumeDispatcher

class mastermind.distributed.dispatchers.StartDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.StartDispatcher

class mastermind.distributed.dispatchers.IsFinishedDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.IsFinishedDispatcher

class mastermind.distributed.dispatchers.IsRedoableDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.IsRedoableDispatcher

class mastermind.distributed.dispatchers.IsUndoableDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.IsUndoableDispatcher

class mastermind.distributed.dispatchers.RedoDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.RedoDispatcher

class mastermind.distributed.dispatchers.UndoDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.UndoDispatcher

class mastermind.distributed.dispatchers.AttemptsDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.AttemptsDispatcher

class mastermind.distributed.dispatchers.GetProposedCombinationDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.GetProposedCombinationDispatcher

class mastermind.distributed.dispatchers.GetResultDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.GetResultDispatcher

class mastermind.distributed.dispatchers.IsLooserDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.IsLooserDispatcher

class mastermind.distributed.dispatchers.IsWinnerDispatcher {
    + dispatch(): void
}
mastermind.distributed.dispatchers.Dispatcher <|-- mastermind.distributed.dispatchers.IsWinnerDispatcher

enum mastermind.distributed.dispatchers.FrameType {
    START,
	STATE,
	UNDO,
	REDO,
	UNDOABLE,
	REDOABLE,
	PROPOSE,
	CLOSE,
	FINISHED,
	CONTINUE_STATE,
	NEW_GAME
}

@enduml